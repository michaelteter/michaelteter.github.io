I"à<h2 id="problem">Problem</h2>

<p>I wanted to do some Elixir/Phoenix development in Windows 10 (donâ€™t ask whyâ€¦),
but I couldnâ€™t build my Phoenix app due to a failure building the comeonin module.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>could not compile dependency :comeonin, "mix compile" failed. You can 
recompile this dependency with "mix deps.compile comeonin", update it with "mix
deps.update comeonin" or clean it with "mix deps.clean comeonin"
** (Mix.Error) Could not find the program `nmake`.
</code></pre></div></div>

<p>The issue is that even though I had installed the Visual Studio Community 
development tools (which includes nmake), the build tools are not visible
in the path on Powershell.</p>

<p>Visual Studio does provide a batch file to make those tools visible, but
running that script only makes the tools visible to the (temporary) shell
that the script runs in.</p>

<h2 id="solution">Solution</h2>

<h3 id="pre-reqs">Pre-reqs</h3>

<ol>
  <li>Erlang and Elixir (Windows packages) are installed.</li>
  <li>MS Visual Studio, or the Community version, or the MS build tools, are installed.</li>
</ol>

<h3 id="build-tools-paths">Build Tools Paths</h3>

<p>From pre-req 2, determine the path to your <em>vcvars64.bat</em> script.  For me this was</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat
</code></pre></div></div>

<h3 id="powershell-profile">Powershell Profile</h3>

<p>Edit the Powershell profile file.  If the file doesnâ€™t exist, create it.  The path is</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\Users\your_username_here\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
</code></pre></div></div>

<p>Add the following code to the profile</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function Invoke-CmdScript {
  param(
    [String] $scriptName 
  )
  $cmdLine = """$scriptName"" $args &amp; set"
  &amp; $Env:SystemRoot\system32\cmd.exe /c $cmdLine |
  select-string '^([^=]*)=(.*)$' | foreach-object {
    $varName = $_.Matches[0].Groups[1].Value
    $varValue = $_.Matches[0].Groups[2].Value
    set-item Env:$varName $varValue
  }
}

Invoke-CmdScript "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
</code></pre></div></div>

<p>The function allows you to run a script, the one that makes the build tools visible,
but instead of losing the context after that script ends, the settings are propogated
back to the calling shell (Powershell).</p>

<p>The profile then uses that Invoke-CmdScript function to call the vcvars64.bat script that we
got from step 2 of the prereqs.</p>

<p>With this done, you should be able to successfully build/compile Elixir modules within Windows 10.</p>

:ET